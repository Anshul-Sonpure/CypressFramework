{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 8,
    "pending": 0,
    "failures": 3,
    "start": "2023-09-14T14:47:39.249Z",
    "end": "2023-09-14T14:48:34.092Z",
    "duration": 54843,
    "testsRegistered": 11,
    "passPercent": 72.72727272727273,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0258e4ec-8539-4b03-9e28-757694e3aab9",
      "title": "",
      "fullFile": "cypress\\e2e\\apiTest.cy.js",
      "file": "cypress\\e2e\\apiTest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13f9a4c7-47b0-4591-bfe9-1bbea388d296",
          "title": "Login to API to get valid access_token",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with correct email & password",
              "fullTitle": "Login to API to get valid access_token login with correct email & password",
              "timedOut": null,
              "duration": 30779,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\apiTest.cy.js\\\\Login to API to get valid access_token -- login with correct email & password (failed).png\"\n    ]\n  ]\n}",
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  // Receive the object containing response and access_token\n  const response = result.response; // Access the entire response object\n  // Assert that the response status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response body contains the 'access_token' property\n  expect(response.body).to.have.property('access_token').that.is.not.empty;\n  const responseBodyString = JSON.stringify(response.body, null, 2);\n  cy.logger('apitest', 'Validated login with correct email & password');\n  cy.logger('apitest', response.body.access_token);\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `30000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: POST\nURL: https://mobilestoreapi.onrender.com/auth/login\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `30000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: POST\nURL: https://mobilestoreapi.onrender.com/auth/login\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:51705/__cypress/runner/cypress_runner.js:133022:70)\n    at tryCatcher (http://localhost:51705/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (http://localhost:51705/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (http://localhost:51705/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (http://localhost:51705/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (http://localhost:51705/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (http://localhost:51705/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (http://localhost:51705/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (http://localhost:51705/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (http://localhost:51705/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (http://localhost:51705/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (http://localhost:51705/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at login (webpack://cypressframework/./cypress/support/apiUtils.js:5:14)\n    at Context.eval (webpack://cypressframework/./cypress/e2e/apiTest/loginUser.cy.js:9:4)",
                "diff": null
              },
              "uuid": "1a6bb878-5165-4352-8f2a-a4c40941eb47",
              "parentUUID": "13f9a4c7-47b0-4591-bfe9-1bbea388d296",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "login with incorrect email & password",
              "fullTitle": "Login to API to get valid access_token login with incorrect email & password",
              "timedOut": null,
              "duration": 11580,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login(`${loginuser.incorrectemail}`, `${loginuser.password}`).then(result => {\n  // Receive the object containing response and access_token\n  const response = result.response; // Access the entire response object\n  // Assert that the response status code is 200\n  expect(response.status).to.eq(401);\n  // Assert that the response body contains the 'access_token' property\n  expect(response.body.message).to.eq('Incorrect email or password');\n});",
              "err": {},
              "uuid": "4464618b-f7be-4e73-a3e9-8da60be5f0b7",
              "parentUUID": "13f9a4c7-47b0-4591-bfe9-1bbea388d296",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4464618b-f7be-4e73-a3e9-8da60be5f0b7"
          ],
          "failures": [
            "1a6bb878-5165-4352-8f2a-a4c40941eb47"
          ],
          "pending": [],
          "skipped": [],
          "duration": 42359,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a527595-8990-45ef-92db-061f406de181",
          "title": "Get all products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET Request with Bearer Token",
              "fullTitle": "Get all products GET Request with Bearer Token",
              "timedOut": null,
              "duration": 617,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Call the login function to log in and get the access token\nlogin(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token;\n  getproducts(accessToken).then(response => {\n    expect(response.status).to.eq(200); // validate status code as 200 OK\n    const productNames = JSONPath({\n      path: '$..name',\n      json: response.body\n    });\n    // Assertion for products\n    expect(productNames).to.include('Samsung Galaxy A23 Blue', 'Redmi 11 Prime 5G', 'Samsung Galaxy Flip 5G');\n    //logging the reponse in log file;\n    const responseBodyString = JSON.stringify(response.body, null, 2);\n    cy.logger('apitest', \"\\n\" + 'Validated products for getproduct call' + \"\\n\");\n    cy.logger('apitest', 'Response Body:\\n' + responseBodyString);\n  });\n});",
              "err": {},
              "uuid": "726b3893-2e66-46dd-b309-b0d1bc5a7ad5",
              "parentUUID": "0a527595-8990-45ef-92db-061f406de181",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation on the request body",
              "fullTitle": "Get all products Validation on the request body",
              "timedOut": null,
              "duration": 1537,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\apiTest.cy.js\\\\Get all products -- Validation on the request body (failed).png\"\n    ]\n  ]\n}",
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token;\n  getproducts(accessToken).then(response => {\n    expect(response.status).to.eq(200); // validate status code as 200 OK\n    const A23Price = JSONPath({\n      path: '$.[0].cost',\n      json: response.body\n    });\n    const M33Name = JSONPath({\n      path: '$.[2].name',\n      json: response.body\n    });\n    // Assertion for products\n    expect(M33Name[0]).to.equal('Samsung Galaxy M33 5G ');\n    expect(A23Price).to.deep.eq([18999]);\n    cy.log(JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {
                "message": "AssertionError: expected 'OnePlus Nord CE 3 Lite 5G' to equal 'Samsung Galaxy M33 5G '",
                "estack": "AssertionError: expected 'OnePlus Nord CE 3 Lite 5G' to equal 'Samsung Galaxy M33 5G '\n    at Context.eval (webpack://cypressframework/./cypress/e2e/apiTest/getProducts.cy.js:42:32)",
                "diff": "- 'OnePlus Nord CE 3 Lite 5G'\n+ 'Samsung Galaxy M33 5G '\n"
              },
              "uuid": "bee7c18e-0dfb-45d2-8dab-448522c14db1",
              "parentUUID": "0a527595-8990-45ef-92db-061f406de181",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation for revoked access token",
              "fullTitle": "Get all products Validation for revoked access token",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const accessToken = `${loginuser.revokedtoken}`;\ngetproducts(accessToken).then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error access_token is revoked');\n});",
              "err": {},
              "uuid": "d5747299-6fd0-4871-9673-3331fa1fb9df",
              "parentUUID": "0a527595-8990-45ef-92db-061f406de181",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation for no Auth Token Send",
              "fullTitle": "Get all products Validation for no Auth Token Send",
              "timedOut": null,
              "duration": 246,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getproductswithouttoken().then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error in authorization format');\n});",
              "err": {},
              "uuid": "b74b5fd3-38e6-4b22-8542-f9caf3c734c5",
              "parentUUID": "0a527595-8990-45ef-92db-061f406de181",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "726b3893-2e66-46dd-b309-b0d1bc5a7ad5",
            "d5747299-6fd0-4871-9673-3331fa1fb9df",
            "b74b5fd3-38e6-4b22-8542-f9caf3c734c5"
          ],
          "failures": [
            "bee7c18e-0dfb-45d2-8dab-448522c14db1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2628,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "13bddbcc-a3cf-4348-a71f-0a5ecfccfa31",
          "title": "Create new products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate user is able to create new products",
              "fullTitle": "Create new products Validate user is able to create new products",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token; // Access the access_token\n  createProduct(payload, accessToken).then(response => {\n    expect(response.status).to.eq(201);\n    expect(response.body.name).to.eq(payload.name);\n    cy.logger('apitest', 'Validate user is able to create new products -- Test Passed');\n    cy.logger('apitest', JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {},
              "uuid": "5df0566f-c996-489e-9efa-f958473557bf",
              "parentUUID": "13bddbcc-a3cf-4348-a71f-0a5ecfccfa31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5df0566f-c996-489e-9efa-f958473557bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 581,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0becfc20-15fb-4759-9cd3-deabad6bd7cf",
          "title": "Update Products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate user is able to update existing products",
              "fullTitle": "Update Products Validate user is able to update existing products",
              "timedOut": null,
              "duration": 759,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\apiTest.cy.js\\\\Update Products -- Validate user is able to update existing products (failed).png\"\n    ]\n  ]\n}",
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token; // Access the access_token\n  updateProduct(payload, accessToken, productId).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body.quantity).to.eq(payload.quantity);\n    cy.logger('apitest', 'Validate user is able to update existing products -- Test Passed');\n    cy.logger('apitest', JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'access_token')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'access_token')\n    at Context.eval (webpack://cypressframework/./cypress/support/apiUtils.js:16:40)",
                "diff": null
              },
              "uuid": "98f49087-a588-4395-b49e-7fb8849f442c",
              "parentUUID": "0becfc20-15fb-4759-9cd3-deabad6bd7cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate if no auth token send",
              "fullTitle": "Update Products Validate if no auth token send",
              "timedOut": null,
              "duration": 3195,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(2500);\nupdateProductwithoutToken(payload, productId).then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error in authorization format');\n});",
              "err": {},
              "uuid": "87c9a26c-14ce-4efc-bd11-64e7bc9d5b75",
              "parentUUID": "0becfc20-15fb-4759-9cd3-deabad6bd7cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate if Token is revoked",
              "fullTitle": "Update Products Validate if Token is revoked",
              "timedOut": null,
              "duration": 2769,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(2500);\nconst accessToken = `${loginuser.revokedtoken}`;\nupdateProduct(payload, accessToken, productId).then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error access_token is revoked');\n});",
              "err": {},
              "uuid": "633e83b0-cff8-4097-a193-7f11d6117f50",
              "parentUUID": "0becfc20-15fb-4759-9cd3-deabad6bd7cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87c9a26c-14ce-4efc-bd11-64e7bc9d5b75",
            "633e83b0-cff8-4097-a193-7f11d6117f50"
          ],
          "failures": [
            "98f49087-a588-4395-b49e-7fb8849f442c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6723,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "50807d62-7f36-45eb-81bd-438997b30812",
          "title": "Delete Product",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate user is able to delete existing products",
              "fullTitle": "Delete Product Validate user is able to delete existing products",
              "timedOut": null,
              "duration": 906,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token; // Access the access_token\n  deleteProduct(accessToken, productId).then(response => {\n    expect(response.status).to.eq(200);\n    cy.logger('apitest', 'Validate user is able to delete products -- Test Passed');\n    cy.logger('apitest', JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {},
              "uuid": "0e59dc0b-b903-4f3a-a688-84fd93b87377",
              "parentUUID": "50807d62-7f36-45eb-81bd-438997b30812",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e59dc0b-b903-4f3a-a688-84fd93b87377"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 906,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/TestReport",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}